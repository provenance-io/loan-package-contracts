name: Build and Publish

on:
  workflow_dispatch:
    inputs:
      publishing_environment:
        description: 'Environment the contracts should be bootstrapped to'
        required: true
        default: 'testnet'
        type: choice
        options:
          - 'testnet'
          - 'mainnet'
      os_url:
        description: Object Store URL
        default: 'grpcs://test.figure.com/objectstore.'
        required: true
        type: string
      prov_url:
        description: Provenance URL
        default: 'grpcs://34.148.39.82:9090'
        required: true
        type: string
      chain_id:
        description: Chain Id
        default: 'pio-testnet-1'
        required: true
        type: string

jobs:
  linting:
    name: Linting
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Linting
        run: ./gradlew clean ktlintCheck --parallel

  build-and-publish:
    name: Build and Publish Jar
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.publishing_environment }}
    env:
      IS_TEST: ${{ github.event.inputs.publishing_environment == 'testnet' }}
      OS_GRPC_URL: ${{ github.event.inputs.os_url }}
      PROVENANCE_GRPC_URL: ${{ github.event.inputs.prov_url }}
      ENCRYPTION_PRIVATE_KEY: ${{ secrets.ENCRYPTION_PRIVATE_KEY }}
      SIGNING_PRIVATE_KEY: ${{ secrets.SIGNING_PRIVATE_KEY }}
      CHAIN_ID: ${{ github.event.inputs.chain_id }}
      OS_GRPC_APIKEY: ${{ secrets.OS_GRPC_APIKEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Build with Gradle
        run: ./gradlew -i clean build --refresh-dependencies :generateVersionFile githubRelease --stacktrace
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Contract Syntax
        run: ./gradlew p8eClean p8eCheck --info

      - name: Bootstrap Test
        run: ./gradlew p8eBootstrap --info

      - name: Create Outputs
        run: |-
          echo "::set-output name=semVersion::$(cat build/semver/version.txt | head -1)"
          echo "::set-output name=semVersionTag::$(cat build/semver/version.txt | tail -1)"
        id: ci-release-create-outputs
        shell: bash

      - name: Install gpg secret key
        run: |
          export GPG_TTY=$(tty)
          echo -n "${{ secrets.OSSRH_GPG_SECRET_KEY }}" | base64 --decode | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
          echo -n "${{ secrets.OSSRH_GPG_SECRET_KEY }}" | base64 --decode > $GITHUB_WORKSPACE/release.gpg
          
      - name: Publish to Maven Central
        run: |
          ./gradlew publishToSonatype -Psemver.overrideVersion=${{ steps.ci-release-create-outputs.outputs.semVersion }} $(if [ "${{github.event.release.prerelease}}" = "true" ]; then echo 'closeSonatypeStagingRepository'; else echo 'closeAndReleaseSonatypeStagingRepository'; fi) \
            -Psigning.keyId=B7D30ABE -Psigning.password="${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }}" -Psigning.secretKeyRingFile=$GITHUB_WORKSPACE/release.gpg \
            --info
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: "test-results"
          path: "**/build/test-results/**/*.xml"

  publish_test_results:
    name: Publish Test Results
    needs: [ build-and-publish ]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: "test-results"
          path: artifacts

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          check_name: "Test Results"
          pull_request_build: "commit"
          report_individual_runs: true
          files: artifacts/**/*.xml
